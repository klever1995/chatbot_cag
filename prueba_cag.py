# prueba_cag.py
import sys
import os
os.environ['NO_PROXY'] = 'openai.azure.com,azure.com,recursoazureopenaimupi.openai.azure.com'
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.cag_engine import cag_engine
from cache.context_cache import context_cache

def main():
    print("üß™ Probando motor CAG...")
    print("=" * 50)
    
    # Limpiar cach√© de contexto primero
    print("üîÑ Limpiando cach√© de contexto...")
    # No hay m√©todo clear, pero a√±adiremos documentos frescos
    
    # Documentos de prueba para cach√© de contexto
    print("üìù A√±adiendo documentos a cach√© de contexto...")
    test_documents = [
        "Python es un lenguaje de programaci√≥n interpretado de alto nivel creado por Guido van Rossum en 1991.",
        "Los lenguajes interpretados como Python no necesitan compilaci√≥n previa, se ejecutan l√≠nea por l√≠nea.",
        "JavaScript es otro lenguaje interpretado principalmente usado para desarrollo web frontend.",
        "Los lenguajes compilados como C++ requieren compilaci√≥n antes de su ejecuci√≥n.",
        "Python es conocido por su sintaxis clara y legible que favorece la productividad del desarrollador."
    ]
    
    for doc in test_documents:
        context_cache.add_document(doc, {"type": "programming"})
    
    # Consultas de prueba que deber√≠an ser respondidas desde CAG
    test_queries = [
        "qu√© es python",
        "quien cre√≥ python",
        "c√≥mo funcionan los lenguajes interpretados",
        "para qu√© se usa javascript"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüîç Consulta {i}: '{query}'")
        print("-" * 40)
        
        try:
            response = cag_engine.generate_response(query)
            print(f"‚úÖ Respuesta CAG:\n{response}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("\n‚úÖ Prueba de CAG completada")

if __name__ == "__main__":
    main()