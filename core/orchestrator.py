# core/orchestrator.py
import logging
import re
from config.settings import RAG_THRESHOLD

logger = logging.getLogger(__name__)

class Orchestrator:
    """Orquestador inteligente que decide entre RAG y CAG para documentos legales"""
    
    def __init__(self):
        self.rag_threshold = RAG_THRESHOLD
        logger.info(f"‚úÖ Orquestador inicializado con umbral RAG: {self.rag_threshold}")
    
    def should_use_rag(self, query):
        """
        Decide si usar RAG bas√°ndose en el tipo de consulta legal/laboral
        """
        query_lower = query.lower().strip()
        
        # 1. Consultas que SIEMPRE usan CAG (conversacionales/generales)
        if self._is_general_conversation(query_lower):
            logger.debug("üí¨ Consulta conversacional ‚Üí usar CAG")
            return False
        
        # 2. Consultas que SIEMPRE usan RAG (espec√≠ficas de documentos)
        if self._is_document_specific_query(query_lower):
            logger.debug("üìÑ Consulta espec√≠fica de documento ‚Üí usar RAG")
            return True
        
        # 3. Consultas basadas en patrones legales/laborales
        if self._is_legal_labor_query(query_lower):
            logger.debug("‚öñÔ∏è Consulta legal/laboral ‚Üí usar RAG")
            return True
        
        # 4. Por defecto para consultas ambiguas
        logger.debug("‚ö° Consulta ambigua ‚Üí usar RAG por defecto")
        return True

    def _is_general_conversation(self, query_lower):
        """Determina si es una conversaci√≥n general que no requiere documentos"""
        general_patterns = [
            r"^hola.*", r"^buenos d√≠as.*", r"^buenas tardes.*", r"^buenas noches.*",
            r"^c√≥mo est√°s.*", r"^qui√©n eres.*", r"^qu√© puedes hacer.*", 
            r"^gracias.*", r"^adi√≥s.*", r"^chao.*",
            r"^qu√© hora es.*", r"^dime un chiste.*", r"^habla sobre ti.*",
            r"^ok.*", r"^entendido.*", r"^perfecto.*", r"^excelente.*",
            r"^genial.*", r"^bien.*", r"^vale.*", r"^de acuerdo.*"
        ]
        
        return any(re.match(pattern, query_lower) for pattern in general_patterns)

    def _is_document_specific_query(self, query_lower):
        """Determina si la consulta hace referencia espec√≠fica a documentos subidos"""
        document_patterns = [
            r".*documento.*", r".*pdf.*", r".*archivo.*", r".*contrato.*",
            r".*ley.*", r".*norma.*", r".*reglamento.*", r".*cl√°usula.*",
            r".*art√≠culo.*", r".*inciso.*", r".*secci√≥n.*", r".*cap√≠tulo.*",
            r"en el (pdf|documento).*", r"seg√∫n (el|la).*", r"de acuerdo a.*",
            r"basado en.*", r"seg√∫n lo establecido.*", r"conforme a.*"
        ]
        
        return any(re.search(pattern, query_lower) for pattern in document_patterns)

    def _is_legal_labor_query(self, query_lower):
        """Determina si es una consulta legal/laboral que requiere documentos"""
        legal_patterns = [
            # Patrones laborales
            r"jornada laboral.*", r"horario de trabajo.*", r"salario.*", r"sueldo.*",
            r"vacaciones.*", r"d√≠as libres.*", r"descanso.*", r"horas extras.*",
            r"bonificaciones.*", r"prestaciones.*", r"aguinaldo.*", r"utilidades.*",
            r"prima vacacional.*", r"fondo de ahorro.*", r"vales de despensa.*",
            
            # Patrones legales
            r"est√° prohibido.*", r"est√° permitido.*", r"obligaciones.*",
            r"derechos.*", r"deberes.*", r"prohibici√≥n.*", r"permiso.*",
            r"multa.*", r"sanci√≥n.*", r"infracci√≥n.*", r"incumplimiento.*",
            r"responsabilidad.*", r"cl√°usula.*", r"contrato.*", r"convenio.*",
            
            # Consultas espec√≠ficas
            r"qu√© pasa si.*", r"consecuencias de.*", r"c√≥mo solicitar.*",
            r"requisitos para.*", r"procedimiento.*", r"tr√°mite.*",
            r"c√≥mo funciona.*", r"qu√© necesito para.*", r"pasos para.*",
            
            # Palabras clave legales
            r"contrataci√≥n.*", r"despido.*", r"renuncia.*", r"liquidaci√≥n.*",
            r"jubilaci√≥n.*", r"pensi√≥n.*", r"seguro social.*", r"imss.*",
            r"infonavit.*", r"fonacot.*", r"capacitaci√≥n.*", r"inducci√≥n.*"
        ]
        
        return any(re.search(pattern, query_lower) for pattern in legal_patterns)
    
    def route_query(self, query):

        query_lower = query.lower().strip()
        
        # Verificar si es conversaci√≥n general
        is_general = self._is_general_conversation(query_lower)
        
        if is_general:
            logger.debug("üí¨ Consulta conversacional ‚Üí usar CAG (modo general)")
            return "cag", True
        
        # Decidir entre RAG y CAG documental
        if self.should_use_rag(query):
            return "rag", False
        else:
            return "cag", False

# Instancia singleton para ser importada
orchestrator = Orchestrator()